#!/usr/bin/env bash

while test $# != 0; do
  case "$1" in
  --help)
    echo "git open [commit]" 1>&2
    exit 0
    ;;
  --)
    shift;
    break
    ;;
  *)
    commit=$1
    ;;
  esac
  shift
done

# are we in a git repo?
if ! git rev-parse --is-inside-work-tree &>/dev/null; then
  echo "Not a git repository." 1>&2
  exit 1
fi

# choose remote. priority to: provided argument, default in config, detected tracked remote, 'origin'
branch=$(git symbolic-ref -q --short HEAD)
upstream_branch_full_name=$(git config "branch.$branch.merge")
upstream_branch=${upstream_branch_full_name#"refs/heads/"}
tracked_remote=$(git config "branch.$branch.remote")
default_remote=$(git config open.default.remote)
remote=$default_remote
remote=${remote:-$tracked_remote}
remote=${remote:-"origin"}

giturl=$(git ls-remote --get-url "$remote")

if [[ -z "$giturl" ]]; then
  echo "Git remote is not set for $remote" 1>&2
  exit 1
fi

# From git-fetch(5), native protocols:
# ssh://[user@]host.xz[:port]/path/to/repo.git/
# git://host.xz[:port]/path/to/repo.git/
# http[s]://host.xz[:port]/path/to/repo.git/
# ftp[s]://host.xz[:port]/path/to/repo.git/
# [user@]host.xz:path/to/repo.git/ - scp-like but is an alternative to ssh.
# [user@]hostalias:path/to/repo.git/ - handles host aliases defined in ssh_config(5)

# Determine whether this is a url (https, ssh, git+ssh...) or an scp-style path
if [[ "$giturl" =~ ^[a-z\+]+://.* ]]; then
  # Trim URL scheme and possible username
  gitprotocol=${giturl%%://*}
  uri=${giturl#*://}
  uri=${uri#*@}

  # Split on first '/ to get server name and path
  domain=${uri%%/*}
  urlpath=${uri#*/}

  # Remove port number from non-http/https protocols (ie, ssh)
  if [[ $gitprotocol != 'https' && $gitprotocol != 'http' ]]; then
    domain=${domain%:*}
  fi
else
  # Trim possible username from SSH path
  uri=${giturl##*@}

  # Split on first ':' to get server name and path
  domain=${uri%%:*}
  urlpath=${uri#*:}
fi

# Trim "/" from beginning of URL; "/" and ".git" from end of URL
urlpath=${urlpath#/} urlpath=${urlpath%/} urlpath=${urlpath%.git}

# If the URL is provided as "http", preserve that
protocol="https"
if [[ $gitprotocol == 'http' ]]; then
  protocol='http'
fi

# Allow config options to replace the server or the protocol
openurl="$protocol://$domain"

function getConfig() {
  config=$(git config --get-urlmatch "open.$1" "$openurl")
  echo "${config:-${!1}}"
}

domain=$(getConfig "domain")
protocol=$(getConfig "protocol")

# Remote ref to open
remote_ref=${upstream_branch:-${branch:-$(git describe --tags --exact-match 2>/dev/null || git rev-parse HEAD)}}

# Split arguments on '/'
IFS='/' read -r -a pathargs <<<"$urlpath"

if [ -n "$commit" ]; then
  providerBranchRef="/commit/$commit"
else
  # Make # and % characters url friendly
  #   github.com/paulirish/git-open/pull/24
  remote_ref=${remote_ref//%/%25} remote_ref=${remote_ref//#/%23}
  providerBranchRef="/tree/$remote_ref"
fi

openurl="$protocol://$domain/$urlpath"

# simplify URL for master
if [ $remote_ref != "master" -o -n "$commit" ]; then
    openurl="$openurl$providerBranchRef"
fi

# Allow printing the url if BROWSER=echo
if [[ $BROWSER != "echo" ]]; then
  exec &>/dev/null
fi

# open it in a browser
${BROWSER:-"xdg-open"} "$openurl"
